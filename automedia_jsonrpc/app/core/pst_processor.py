################################################################################
#
#    Copyright 2022-… @ Félix Brezo (@febrezo)
#
#    This program is part of Automedia. You can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

from email import generator
from pathlib import Path
import logging
import os
import uuid

from libratom.lib.pff import PffArchive


def extract_files_from_pst_file(file_path):
    """An internal function to extract images from local PST files

    This method is used by `extract_files` and `extract_files`. 
    Note that local in this method refers local to the server, NOT to the client.

    As a side note, the contents of this function have been generated by the
    freaking ChatGPT. Only minor changes have been applied to set the variables.

    Args:
        file_path (str): The local path to the PDF file.

    Return:
        list. List of extracted files.
    """
    archive = PffArchive(file_path)

    extraction_folder_name = os.path.join("/data", uuid.uuid4().hex)
    os.mkdir(extraction_folder_name)
    eml_out = Path(extraction_folder_name)

    file_paths = []

    for folder in archive.folders():
        if folder.get_number_of_sub_messages() != 0:
            for message in folder.sub_messages:
                name = message.subject.replace(" ", "_")
                name = name.replace("/","-")
                filename = eml_out / f"{message.identifier}_{name}.eml"
                filename.write_text(archive.format_message(message))
                logging.info(f"Extracted file: {str(filename)}")
                file_paths.append(str(filename))

    return {
        "path": file_path,
        "data": file_paths
    }